/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AtBatJoined = ContractEventLog<{
  atBatID: string;
  nftAddress: string;
  tokenID: string;
  firstSessionID: string;
  role: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type AtBatProgress = ContractEventLog<{
  atBatID: string;
  outcome: string;
  balls: string;
  strikes: string;
  pitcherAddress: string;
  pitcherTokenID: string;
  batterAddress: string;
  batterTokenID: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;
export type AtBatStarted = ContractEventLog<{
  atBatID: string;
  nftAddress: string;
  tokenID: string;
  firstSessionID: string;
  role: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type EIP712DomainChanged = ContractEventLog<{}>;
export type FullcountDeployed = ContractEventLog<{
  version: string;
  SecondsPerPhase: string;
  0: string;
  1: string;
}>;
export type PitchCommitted = ContractEventLog<{
  sessionID: string;
  0: string;
}>;
export type PitchRevealed = ContractEventLog<{
  sessionID: string;
  pitch: [string, string, string, string];
  0: string;
  1: [string, string, string, string];
}>;
export type SessionAborted = ContractEventLog<{
  sessionID: string;
  nftAddress: string;
  tokenID: string;
  0: string;
  1: string;
  2: string;
}>;
export type SessionExited = ContractEventLog<{
  sessionID: string;
  nftAddress: string;
  tokenID: string;
  0: string;
  1: string;
  2: string;
}>;
export type SessionJoined = ContractEventLog<{
  sessionID: string;
  nftAddress: string;
  tokenID: string;
  role: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type SessionResolved = ContractEventLog<{
  sessionID: string;
  outcome: string;
  pitcherAddress: string;
  pitcherTokenID: string;
  batterAddress: string;
  batterTokenID: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type SessionStarted = ContractEventLog<{
  sessionID: string;
  nftAddress: string;
  tokenID: string;
  role: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type SwingCommitted = ContractEventLog<{
  sessionID: string;
  0: string;
}>;
export type SwingRevealed = ContractEventLog<{
  sessionID: string;
  swing: [string, string, string, string];
  0: string;
  1: [string, string, string, string];
}>;

export interface FullcountABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FullcountABI;
  clone(): FullcountABI;
  methods: {
    AtBatSessions(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    AtBatState(arg0: number | string | BN): NonPayableTransactionObject<{
      pitcherNFT: [string, string];
      batterNFT: [string, string];
      balls: string;
      strikes: string;
      outcome: string;
      0: [string, string];
      1: [string, string];
      2: string;
      3: string;
      4: string;
    }>;

    Distance0Distribution(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    Distance1Distribution(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    Distance2Distribution(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    Distance3Distribution(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    Distance4Distribution(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    DistanceGT4Distribution(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    FullcountVersion(): NonPayableTransactionObject<string>;

    NumAtBats(): NonPayableTransactionObject<string>;

    NumSessions(): NonPayableTransactionObject<string>;

    SecondsPerPhase(): NonPayableTransactionObject<string>;

    SessionAtBat(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    SessionRequiresSignature(
      arg0: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    SessionState(arg0: number | string | BN): NonPayableTransactionObject<{
      phaseStartTimestamp: string;
      pitcherNFT: [string, string];
      didPitcherCommit: boolean;
      didPitcherReveal: boolean;
      pitcherCommit: string;
      pitcherReveal: [string, string, string, string];
      batterNFT: [string, string];
      didBatterCommit: boolean;
      didBatterReveal: boolean;
      batterCommit: string;
      batterReveal: [string, string, string, string];
      outcome: string;
      pitcherLeftSession: boolean;
      batterLeftSession: boolean;
      0: string;
      1: [string, string];
      2: boolean;
      3: boolean;
      4: string;
      5: [string, string, string, string];
      6: [string, string];
      7: boolean;
      8: boolean;
      9: string;
      10: [string, string, string, string];
      11: string;
      12: boolean;
      13: boolean;
    }>;

    StakedSession(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    abortSession(
      sessionID: number | string | BN
    ): NonPayableTransactionObject<void>;

    atBatHash(
      atBatID: number | string | BN
    ): NonPayableTransactionObject<string>;

    commitPitch(
      sessionID: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    commitSwing(
      sessionID: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    eip712Domain(): NonPayableTransactionObject<{
      fields: string;
      name: string;
      version: string;
      chainId: string;
      verifyingContract: string;
      salt: string;
      extensions: string[];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string[];
    }>;

    getAtBat(
      atBatID: number | string | BN
    ): NonPayableTransactionObject<
      [[string, string], [string, string], string, string, string]
    >;

    getNumberOfSessionsInAtBat(
      atBatID: number | string | BN
    ): NonPayableTransactionObject<string>;

    getSession(
      sessionID: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        [string, string],
        boolean,
        boolean,
        string,
        [string, string, string, string],
        [string, string],
        boolean,
        boolean,
        string,
        [string, string, string, string],
        string,
        boolean,
        boolean
      ]
    >;

    joinSession(
      sessionID: number | string | BN,
      nftAddress: string,
      tokenID: number | string | BN,
      signature: string | number[]
    ): NonPayableTransactionObject<void>;

    pitchHash(
      nonce: number | string | BN,
      speed: number | string | BN,
      vertical: number | string | BN,
      horizontal: number | string | BN
    ): NonPayableTransactionObject<string>;

    randomSample(
      nonce0: number | string | BN,
      nonce1: number | string | BN,
      totalMass: number | string | BN
    ): NonPayableTransactionObject<string>;

    resolve(
      pitch: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      swing: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<string>;

    revealPitch(
      sessionID: number | string | BN,
      nonce: number | string | BN,
      speed: number | string | BN,
      vertical: number | string | BN,
      horizontal: number | string | BN
    ): NonPayableTransactionObject<void>;

    revealSwing(
      sessionID: number | string | BN,
      nonce: number | string | BN,
      kind: number | string | BN,
      vertical: number | string | BN,
      horizontal: number | string | BN
    ): NonPayableTransactionObject<void>;

    sampleOutcomeFromDistribution(
      nonce0: number | string | BN,
      nonce1: number | string | BN,
      distribution: (number | string | BN)[]
    ): NonPayableTransactionObject<string>;

    sessionHash(
      sessionID: number | string | BN
    ): NonPayableTransactionObject<string>;

    sessionProgress(
      sessionID: number | string | BN
    ): NonPayableTransactionObject<string>;

    startAtBat(
      nftAddress: string,
      tokenID: number | string | BN,
      role: number | string | BN,
      requireSignature: boolean
    ): NonPayableTransactionObject<string>;

    startSession(
      nftAddress: string,
      tokenID: number | string | BN,
      role: number | string | BN,
      requireSignature: boolean
    ): NonPayableTransactionObject<string>;

    swingHash(
      nonce: number | string | BN,
      kind: number | string | BN,
      vertical: number | string | BN,
      horizontal: number | string | BN
    ): NonPayableTransactionObject<string>;

    unstakeNFT(
      nftAddress: string,
      tokenID: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AtBatJoined(cb?: Callback<AtBatJoined>): EventEmitter;
    AtBatJoined(
      options?: EventOptions,
      cb?: Callback<AtBatJoined>
    ): EventEmitter;

    AtBatProgress(cb?: Callback<AtBatProgress>): EventEmitter;
    AtBatProgress(
      options?: EventOptions,
      cb?: Callback<AtBatProgress>
    ): EventEmitter;

    AtBatStarted(cb?: Callback<AtBatStarted>): EventEmitter;
    AtBatStarted(
      options?: EventOptions,
      cb?: Callback<AtBatStarted>
    ): EventEmitter;

    EIP712DomainChanged(cb?: Callback<EIP712DomainChanged>): EventEmitter;
    EIP712DomainChanged(
      options?: EventOptions,
      cb?: Callback<EIP712DomainChanged>
    ): EventEmitter;

    FullcountDeployed(cb?: Callback<FullcountDeployed>): EventEmitter;
    FullcountDeployed(
      options?: EventOptions,
      cb?: Callback<FullcountDeployed>
    ): EventEmitter;

    PitchCommitted(cb?: Callback<PitchCommitted>): EventEmitter;
    PitchCommitted(
      options?: EventOptions,
      cb?: Callback<PitchCommitted>
    ): EventEmitter;

    PitchRevealed(cb?: Callback<PitchRevealed>): EventEmitter;
    PitchRevealed(
      options?: EventOptions,
      cb?: Callback<PitchRevealed>
    ): EventEmitter;

    SessionAborted(cb?: Callback<SessionAborted>): EventEmitter;
    SessionAborted(
      options?: EventOptions,
      cb?: Callback<SessionAborted>
    ): EventEmitter;

    SessionExited(cb?: Callback<SessionExited>): EventEmitter;
    SessionExited(
      options?: EventOptions,
      cb?: Callback<SessionExited>
    ): EventEmitter;

    SessionJoined(cb?: Callback<SessionJoined>): EventEmitter;
    SessionJoined(
      options?: EventOptions,
      cb?: Callback<SessionJoined>
    ): EventEmitter;

    SessionResolved(cb?: Callback<SessionResolved>): EventEmitter;
    SessionResolved(
      options?: EventOptions,
      cb?: Callback<SessionResolved>
    ): EventEmitter;

    SessionStarted(cb?: Callback<SessionStarted>): EventEmitter;
    SessionStarted(
      options?: EventOptions,
      cb?: Callback<SessionStarted>
    ): EventEmitter;

    SwingCommitted(cb?: Callback<SwingCommitted>): EventEmitter;
    SwingCommitted(
      options?: EventOptions,
      cb?: Callback<SwingCommitted>
    ): EventEmitter;

    SwingRevealed(cb?: Callback<SwingRevealed>): EventEmitter;
    SwingRevealed(
      options?: EventOptions,
      cb?: Callback<SwingRevealed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AtBatJoined", cb: Callback<AtBatJoined>): void;
  once(
    event: "AtBatJoined",
    options: EventOptions,
    cb: Callback<AtBatJoined>
  ): void;

  once(event: "AtBatProgress", cb: Callback<AtBatProgress>): void;
  once(
    event: "AtBatProgress",
    options: EventOptions,
    cb: Callback<AtBatProgress>
  ): void;

  once(event: "AtBatStarted", cb: Callback<AtBatStarted>): void;
  once(
    event: "AtBatStarted",
    options: EventOptions,
    cb: Callback<AtBatStarted>
  ): void;

  once(event: "EIP712DomainChanged", cb: Callback<EIP712DomainChanged>): void;
  once(
    event: "EIP712DomainChanged",
    options: EventOptions,
    cb: Callback<EIP712DomainChanged>
  ): void;

  once(event: "FullcountDeployed", cb: Callback<FullcountDeployed>): void;
  once(
    event: "FullcountDeployed",
    options: EventOptions,
    cb: Callback<FullcountDeployed>
  ): void;

  once(event: "PitchCommitted", cb: Callback<PitchCommitted>): void;
  once(
    event: "PitchCommitted",
    options: EventOptions,
    cb: Callback<PitchCommitted>
  ): void;

  once(event: "PitchRevealed", cb: Callback<PitchRevealed>): void;
  once(
    event: "PitchRevealed",
    options: EventOptions,
    cb: Callback<PitchRevealed>
  ): void;

  once(event: "SessionAborted", cb: Callback<SessionAborted>): void;
  once(
    event: "SessionAborted",
    options: EventOptions,
    cb: Callback<SessionAborted>
  ): void;

  once(event: "SessionExited", cb: Callback<SessionExited>): void;
  once(
    event: "SessionExited",
    options: EventOptions,
    cb: Callback<SessionExited>
  ): void;

  once(event: "SessionJoined", cb: Callback<SessionJoined>): void;
  once(
    event: "SessionJoined",
    options: EventOptions,
    cb: Callback<SessionJoined>
  ): void;

  once(event: "SessionResolved", cb: Callback<SessionResolved>): void;
  once(
    event: "SessionResolved",
    options: EventOptions,
    cb: Callback<SessionResolved>
  ): void;

  once(event: "SessionStarted", cb: Callback<SessionStarted>): void;
  once(
    event: "SessionStarted",
    options: EventOptions,
    cb: Callback<SessionStarted>
  ): void;

  once(event: "SwingCommitted", cb: Callback<SwingCommitted>): void;
  once(
    event: "SwingCommitted",
    options: EventOptions,
    cb: Callback<SwingCommitted>
  ): void;

  once(event: "SwingRevealed", cb: Callback<SwingRevealed>): void;
  once(
    event: "SwingRevealed",
    options: EventOptions,
    cb: Callback<SwingRevealed>
  ): void;
}
